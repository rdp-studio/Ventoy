#************************************************************************************
# Copyright (c) 2020, longpanda <admin@ventoy.net>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
# 
#************************************************************************************

function ventoy_pause {
    echo "press Enter to continue ......"
    read vtTmpPause
}

function ventoy_debug_pause {
    if [ -n "${vtdebug_flag}" ]; then
        echo "press Enter to continue ......"
        read vtTmpPause
    fi
}

function ventoy_cli_console {
    if [ -z "$vtoy_display_mode" ]; then
        terminal_output  console
    elif [ "$vtoy_display_mode" = "GUI" ]; then
        terminal_output  console
    fi
}

function ventoy_gui_console {  
    if [ -z "$vtoy_display_mode" ]; then
        terminal_output  gfxterm
    elif [ "$vtoy_display_mode" = "GUI" ]; then
        terminal_output  gfxterm
    fi    
}

function ventoy_power {
    configfile $prefix/power.cfg
}

function ventoy_diagnosis {    
    configfile $prefix/debug.cfg
}

function ventoy_localboot {    
    configfile $prefix/localboot.cfg
}

function ventoy_ext_menu {    
    if [ -e $vt_plugin_path/ventoy/ventoy_grub.cfg ]; then
        set ventoy_new_context=1
        configfile $vt_plugin_path/ventoy/ventoy_grub.cfg
        unset ventoy_new_context
    else
       echo "ventoy_grub.cfg NOT exist."
       echo -e "\npress ENTER to exit ..."
       read vtInputKey
    fi
}

function get_os_type {
    set vtoy_os=Linux
    
    for file in "efi/microsoft/boot/bcd" "sources/boot.wim" "boot/bcd" "bootmgr.efi" "boot/etfsboot.com" ; do        
        if vt_file_exist_nocase (loop)/$file; then        
            set vtoy_os=Windows
            break
        fi
    done

    if [ "$vtoy_os" = "Linux" ]; then
        if vt_strstr "$vt_system_id" "FreeBSD"; then
            set vtoy_os=Unix
            set vt_unix_type=FreeBSD
        elif [ -e (loop)/bin/freebsd-version ]; then
            set vtoy_os=Unix
            set vt_unix_type=FreeBSD
            
            
        elif [ -e (loop)/boot/kernel/kernel ]; then            
            if file --is-x86-kfreebsd (loop)/boot/kernel/kernel; then
                set vtoy_os=Unix
                set vt_unix_type=FreeBSD
            elif file --is-x86-knetbsd (loop)/boot/kernel/kernel; then
                set vtoy_os=Unix
                set vt_unix_type=NetBSD
            fi
        fi
    fi

    if [ -n "${vtdebug_flag}" ]; then
        echo ISO is $vtoy_os
    fi
}

function vt_check_compatible_pe {
    #Check for PE without external tools
    if [ -f $1/HBCD_PE.ini ]; then
        set ventoy_compatible=YES        
    fi
}

function locate_initrd {
    vt_linux_locate_initrd 

    if [ -n "${vtdebug_flag}" ]; then        
        vt_linux_dump_initrd
        ventoy_debug_pause
    fi
}

function locate_wim {
    vt_windows_locate_wim_patch (loop)
    
    if [ -n "${vtdebug_flag}" ]; then
        echo '###############################################'
        vt_dump_wim_patch
        echo '###############################################'
        ventoy_debug_pause
    fi
}

function distro_specify_wim_patch {
    if [ -d (loop)/h3pe ]; then
        vt_windows_collect_wim_patch wim /BOOT/H3_10PE.WIM
        vt_windows_collect_wim_patch wim /BOOT/H3_7PE.WIM
        vt_windows_collect_wim_patch wim /BOOT/H3_8PE.WIM
        vt_windows_collect_wim_patch wim /BOOT/H3_81PE.WIM
    fi
}

function distro_specify_wim_patch_phase2 {
    if [ -f (loop)/boot/boot.wim ]; then
        vt_windows_collect_wim_patch wim /boot/boot.wim
    fi
}


function distro_specify_initrd_file {
    if [ -e (loop)/boot/all.rdz ]; then
        vt_linux_specify_initrd_file /boot/all.rdz
    elif [ -e (loop)/boot/xen.gz ]; then 
        if [ -e (loop)/install.img ]; then
            vt_linux_specify_initrd_file /install.img
        fi
    elif [ -d (loop)/casper ]; then 
        if [ -e (loop)/casper/initrd ]; then
            vt_linux_specify_initrd_file /casper/initrd
        fi
        if [ -e (loop)/casper/initrd.gz ]; then
            vt_linux_specify_initrd_file /casper/initrd.gz
        fi
        if [ -e (loop)/casper/initrd-oem ]; then
            vt_linux_specify_initrd_file /casper/initrd-oem
        fi
    elif [ -e (loop)/boot/grub/initrd.xz ]; then
        vt_linux_specify_initrd_file /boot/grub/initrd.xz
    elif [ -e (loop)/initrd.gz ]; then
        vt_linux_specify_initrd_file /initrd.gz
    elif [ -e (loop)/slax/boot/initrfs.img ]; then
        vt_linux_specify_initrd_file /slax/boot/initrfs.img
    elif [ -e (loop)/pmagic/initrd.img ]; then
        vt_linux_specify_initrd_file /pmagic/initrd.img
    elif [ -e (loop)/boot/initrd.xz ]; then
        vt_linux_specify_initrd_file /boot/initrd.xz
    elif [ -e (loop)/boot/initrd.gz ]; then
        vt_linux_specify_initrd_file /boot/initrd.gz
    elif [ -f (loop)/boot/initrd ]; then
        vt_linux_specify_initrd_file /boot/initrd
    elif [ -f (loop)/boot/x86_64/loader/initrd ]; then
        vt_linux_specify_initrd_file /boot/x86_64/loader/initrd
    elif [ -f (loop)/boot/initramfs-x86_64.img ]; then
        vt_linux_specify_initrd_file /boot/initramfs-x86_64.img
    elif [ -f (loop)/boot/isolinux/initramfs_data64.cpio.gz ]; then 
        vt_linux_specify_initrd_file /boot/isolinux/initramfs_data64.cpio.gz

        
    fi
    
    if [ -f (loop)/isolinux/initrd.gz ]; then 
        vt_linux_specify_initrd_file /isolinux/initrd.gz
    fi
    
    if [ "$vt_chosen_size" = "1133375488" ]; then
        if [ -d (loop)/boot/grub/x86_64-efi ]; then
            vt_cpio_busybox64
        fi
    fi
}


function distro_specify_initrd_file_phase2 {
    if [ -f (loop)/boot/initrd.img ]; then
        vt_linux_specify_initrd_file /boot/initrd.img
    elif [ -f (loop)/Setup/initrd.gz ]; then
        vt_linux_specify_initrd_file /Setup/initrd.gz
    elif [ -f (loop)/isolinux/initramfs ]; then
        vt_linux_specify_initrd_file /isolinux/initramfs
    elif [ -f (loop)/boot/iniramfs.igz ]; then
        vt_linux_specify_initrd_file /boot/iniramfs.igz
    elif [ -f (loop)/initrd-x86_64 ]; then
        vt_linux_specify_initrd_file /initrd-x86_64
    elif [ -f (loop)/live/initrd.img ]; then 
        vt_linux_specify_initrd_file /live/initrd.img
    elif [ -f (loop)/initrd.img ]; then 
        vt_linux_specify_initrd_file /initrd.img
    elif [ -f (loop)/sysresccd/boot/x86_64/sysresccd.img ]; then 
        vt_linux_specify_initrd_file /sysresccd/boot/x86_64/sysresccd.img
    elif [ -f (loop)/CDlinux/initrd ]; then 
        vt_linux_specify_initrd_file /CDlinux/initrd
    elif [ -f (loop)/parabola/boot/x86_64/parabolaiso.img ]; then 
        vt_linux_specify_initrd_file /parabola/boot/x86_64/parabolaiso.img
        if [ -f (loop)/parabola/boot/i686/parabolaiso.img ]; then 
            vt_linux_specify_initrd_file /parabola/boot/i686/parabolaiso.img
        fi
    elif [ -f (loop)/hyperbola/boot/x86_64/hyperiso.img ]; then 
        vt_linux_specify_initrd_file /hyperbola/boot/x86_64/hyperiso.img
        if [ -f (loop)/hyperbola/boot/i686/hyperiso.img ]; then 
            vt_linux_specify_initrd_file /hyperbola/boot/i686/hyperiso.img
        fi
    elif [ -f (loop)/EFI/BOOT/initrd.img ]; then 
        #Qubes
        vt_linux_specify_initrd_file /EFI/BOOT/initrd.img
        if [ "$grub_platform" != "pc" ]; then
            vt_add_replace_file 0 "initrd.img"    
        fi
    elif [ -f (loop)/initrd ]; then 
        vt_linux_specify_initrd_file /initrd
    elif [ -f (loop)/live/initrd1 ]; then 
        vt_linux_specify_initrd_file /live/initrd1
    elif [ -f (loop)/isolinux/initrd.img ]; then 
        vt_linux_specify_initrd_file /isolinux/initrd.img
    elif [ -f (loop)/isolinux/initrd.gz ]; then 
        vt_linux_specify_initrd_file /isolinux/initrd.gz
    elif [ -f (loop)/syslinux/kernel/initramfs.gz ]; then 
        vt_linux_specify_initrd_file /syslinux/kernel/initramfs.gz    
    elif vt_strstr $vt_volume_id "Daphile"; then
        vt_linux_parse_initrd_isolinux   (loop)/isolinux/
    elif [ -f (loop)/boot/rootfs.xz ]; then 
        vt_linux_specify_initrd_file /boot/rootfs.xz
        if [ "$grub_platform" != "pc" ]; then
            vt_add_replace_file 0 "minimal\\x86_64\\rootfs.xz"
        fi
        
    fi
}

function ventoy_get_ghostbsd_ver {

    # vt_parse_iso_create_date $1/${chosen_path} vt_create_date    
    # if regexp "^202005" "$vt_create_date"; then
        # set vt_freebsd_ver=12.x
    # fi
    
    set vt_freebsd_ver=12.x
}

function ventoy_get_furybsd_ver {
    if regexp "13\.[0-9]" "$2"; then
        set vt_freebsd_ver=13.x
    else
        set vt_freebsd_ver=12.x
    fi
}

function ventoy_get_freenas_ver {   
    set vt_freebsd_ver=11.x

    if [ -e (loop)/FreeNAS-MANIFEST ]; then
        vt_parse_freenas_ver (loop)/FreeNAS-MANIFEST vt_freenas_ver
        if regexp "^13\.[0-9]" "$vt_freenas_ver"; then
            set vt_freebsd_ver=13.x
        elif regexp "^12\.[0-9]" "$vt_freenas_ver"; then
            set vt_freebsd_ver=12.x
        elif regexp "^11\.[0-9]" "$vt_freenas_ver"; then
            set vt_freebsd_ver=11.x
        fi
    fi
}

function ventoy_get_midnightbsd_ver {   
    set vt_freebsd_ver=11.x
}

function ventoy_freebsd_proc {
    set vtFreeBsdDistro=FreeBSD

    if vt_strstr "$vt_volume_id" "GHOSTBSD"; then
        ventoy_get_ghostbsd_ver $1 ${chosen_path}
    elif vt_strstr "$vt_volume_id" "FREENAS"; then
        ventoy_get_freenas_ver $1 ${chosen_path}   
    elif vt_strstr "$vt_volume_id" "FURYBSD"; then
        ventoy_get_furybsd_ver $1 ${chosen_path}   
    elif regexp "^13_[0-9]" "$vt_volume_id"; then
        set vt_freebsd_ver=13.x
    elif regexp "^12_[0-9]" "$vt_volume_id"; then
        set vt_freebsd_ver=12.x
    elif regexp "^11_[0-9]" "$vt_volume_id"; then
        set vt_freebsd_ver=11.x
    elif regexp "^10_[0-9]" "$vt_volume_id"; then
        set vt_freebsd_ver=10.x
    elif regexp "^9_[0-9]" "$vt_volume_id"; then
        set vt_freebsd_ver=9.x
    elif [ -d (loop)/usr/midnightbsd-dist ]; then
        ventoy_get_midnightbsd_ver $1 ${chosen_path}
        set vtFreeBsdDistro=MidnightBSD
    elif [ -e (loop)/bin/freebsd-version ]; then
        vt_unix_parse_freebsd_ver (loop)/bin/freebsd-version vt_userland_ver
        if regexp "\"13\.[0-9]-" "$vt_userland_ver"; then
            set vt_freebsd_ver=13.x
        elif regexp "\"12\.[0-9]-" "$vt_userland_ver"; then
            set vt_freebsd_ver=12.x
        elif regexp "\"11\.[0-9]-" "$vt_userland_ver"; then
            set vt_freebsd_ver=11.x
        elif regexp "\"10\.[0-9]-" "$vt_userland_ver"; then
            set vt_freebsd_ver=10.x
        elif regexp "\"9\.[0-9]-" "$vt_userland_ver"; then
            set vt_freebsd_ver=9.x
        fi
    elif [ -e (loop)/README.TXT ]; then
        vt_1st_line (loop)/README.TXT vt_freebsd_line1
        if regexp "FreeBSD 13\.[0-9]-" "$vt_freebsd_line1"; then
            set vt_freebsd_ver=13.x
        elif regexp "FreeBSD 12\.[0-9]-" "$vt_freebsd_line1"; then
            set vt_freebsd_ver=12.x
        elif regexp "FreeBSD 11\.[0-9]-" "$vt_freebsd_line1"; then
            set vt_freebsd_ver=11.x
        elif regexp "FreeBSD 10\.[0-9]-" "$vt_freebsd_line1"; then
            set vt_freebsd_ver=10.x
        elif regexp "FreeBSD 9\.[0-9]-" "$vt_freebsd_line1"; then
            set vt_freebsd_ver=9.x
        fi
    elif vt_strstr "${chosen_path}" "MidnightBSD"; then
        set vt_freebsd_ver=9.x
    else
        set vt_freebsd_ver=12.x
    fi
    
    set vt_freebsd_bit=64
    for file in "/boot/kernel/kernel" "/boot/kernel/kernel.gz"; do
        if [ -e (loop)/$file ]; then    
            if file --is-i386-kfreebsd (loop)/$file; then
                set vt_freebsd_bit=32
            fi
            break
        fi
    done    

    if [ -n "${vtdebug_flag}" ]; then
        echo "This is FreeBSD $vt_freebsd_ver ${vt_freebsd_bit}bit"
    fi
    
    unset vt_unix_mod_path
    for file in "/COPYRIGHT" "/FreeNAS-MANIFEST" "/version" "/etc/fstab"; do   
        if [ -e (loop)${file} ]; then                    
            set vt_unix_mod_path=${file}
            break
        fi
    done
    
    if [ -e (loop)/usr/freebsd-dist/cloninst.sh ]; then
        set vtFreeBsdDistro=ClonOS
    fi
    
    vt_unix_replace_ko $vt_unix_mod_path (vtunix)/ventoy_unix/$vtFreeBsdDistro/geom_ventoy_ko/$vt_freebsd_ver/$vt_freebsd_bit/geom_ventoy.ko.xz
    vt_unix_replace_conf FreeBSD ${1}${chosen_path} 
}

function ventoy_unix_comm_proc {
    vt_unix_reset
    
    if [ "$ventoy_compatible" = "NO" ]; then
        loopback vtunix $vtoy_efi_part/ventoy/ventoy_unix.cpio
        
        if [ "$vt_unix_type" = "FreeBSD" ]; then
            ventoy_freebsd_proc $1 ${chosen_path}        
        elif [ "$vt_unix_type" = "NetBSD" ]; then
            echo "NetBSD not supported"
            
            
            
        else
            if [ -n "${vtdebug_flag}" ]; then
                echo "Unknown unix type"
            fi
        fi
    fi
    
    vt_unix_chain_data ${1}${chosen_path}    
    ventoy_debug_pause
}


function uefi_windows_menu_func {
    vt_windows_reset

    if [ "$ventoy_compatible" = "NO" ]; then   
        
        if [ "$ventoy_fs_probe" = "iso9660" ]; then
            loopback -d loop
            vt_iso9660_nojoliet 1            
            loopback loop $1$2
        fi
        
        for file in "efi/microsoft/boot/bcd"; do
            vt_windows_collect_wim_patch bcd (loop)/$file                
        done

        vt_windows_count_wim_patch vt_wim_cnt
        if [ $vt_wim_cnt -eq 0 ]; then
            distro_specify_wim_patch_phase2
        fi
        
        ventoy_debug_pause        
        locate_wim
    fi

    vt_windows_chain_data ${1}${chosen_path}    
    ventoy_debug_pause
    
    if [ -n "$vtoy_chain_mem_addr" ]; then
        ventoy_cli_console
        chainloader ${vtoy_path}/ventoy_x64.efi  env_param=${env_param} isoefi=${LoadIsoEfiDriver} ${vtdebug_flag} mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        boot
    else
        echo "chain empty failed"
        ventoy_pause
    fi
}

function uefi_linux_menu_func {
    if [ "$ventoy_compatible" = "NO" ]; then    
        
        if [ "$ventoy_fs_probe" = "udf" ]; then
            loopback -d loop            
            set ventoy_fs_probe=iso9660
            loopback loop $1$2
        fi
        
        vt_load_cpio  ${vtoy_path}/ventoy.cpio   $2 $1 "busybox=$ventoy_busybox_ver"
        
        vt_linux_clear_initrd
        
        if [ -d (loop)/pmagic ]; then
            vt_linux_specify_initrd_file /pmagic/initrd.img
        else
            for file in "boot/grub/grub.cfg" "EFI/BOOT/grub.cfg" "EFI/boot/grub.cfg" "efi/boot/grub.cfg" "EFI/BOOT/BOOTX64.conf" "/grub/grub.cfg"; do
                if [ -e (loop)/$file ]; then                    
                    vt_linux_parse_initrd_grub  file  (loop)/$file
                fi
            done
        fi

        # special process for special distros
        if [ -d (loop)/loader/entries ]; then
            vt_linux_parse_initrd_grub  dir  (loop)/loader/entries/
        elif [ -d (loop)/boot/grub ]; then
            vt_linux_parse_initrd_grub  dir  (loop)/boot/grub/
        fi
        
        distro_specify_initrd_file
        
        vt_linux_initrd_count vtcount
        if [ $vtcount -eq 0 ]; then
            distro_specify_initrd_file_phase2
            
            if [ "$vt_efi_dir" = "NO" ]; then
                if [ -f (loop)/efi.img ];  then
                    vt_add_replace_file 0 "initrd"
                fi
            fi
        fi
        
        locate_initrd
        
        if [ -d (loop)/loader/entries ]; then
            vt_linux_get_main_initrd_index vtindex
            
            if [ -d (loop)/arch ]; then
                if [ -f (loop)/arch/boot/x86_64/archiso.img ]; then
                    vt_add_replace_file $vtindex "EFI\\archiso\\archiso.img"
                elif [ -f (loop)/boot/initramfs_x86_64.img ]; then
                    vt_add_replace_file $vtindex "boot\\initramfs_x86_64.img"
                fi
            elif [ -f (loop)/EFI/BOOT/initrd.gz ]; then
                vt_add_replace_file $vtindex "EFI\\BOOT\\initrd.gz"
            elif [ -f (loop)/loader/entries/thinstation.conf ]; then
                vt_add_replace_file $vtindex "boot\\initrd"
            elif [ -f (loop)/loader/entries/pisi-efi-x86_64.conf ]; then
                vt_add_replace_file $vtindex "EFI\\pisi\\initrd.img"
            fi
        elif [ -d (loop)/EFI/boot/entries ]; then
            if [ -f (loop)/parabola/boot/x86_64/parabolaiso.img ]; then
                vt_add_replace_file 0 "EFI\\parabolaiso\\parabolaiso.img"
            elif [ -f (loop)/hyperbola/boot/x86_64/hyperiso.img ]; then
                vt_add_replace_file 0 "EFI\\hyperiso\\hyperiso.img"
            fi
        elif [ -e (loop)/syslinux/alt0/full.cz ]; then
            vt_add_replace_file 0 "EFI\\BOOT\\full.cz"            
            set FirstTryBootFile='@EFI@BOOT@grubx64.efi'


        fi
        
    fi
    
    vt_linux_chain_data ${1}${chosen_path}

    if [ -n "$vtoy_chain_mem_addr" ]; then
        ventoy_cli_console       
        chainloader ${vtoy_path}/ventoy_x64.efi  env_param=${env_param} isoefi=${LoadIsoEfiDriver} FirstTry=${FirstTryBootFile} ${vtdebug_flag} mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        boot
    else
        echo "chain empty failed"
        ventoy_pause
    fi
}

function uefi_unix_menu_func {
    ventoy_unix_comm_proc $1 ${chosen_path}
    
    if [ -n "$vtoy_chain_mem_addr" ]; then
        ventoy_cli_console
        chainloader ${vtoy_path}/ventoy_x64.efi  env_param=${env_param} isoefi=${LoadIsoEfiDriver} FirstTry=${FirstTryBootFile} ${vtdebug_flag} mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        boot
    else
        echo "chain empty failed"
        ventoy_pause
    fi
}

function uefi_iso_menu_func {

    if [ -d (loop)/ ]; then
        loopback -d loop
    fi

    if [ -n "$vtisouefi" ]; then
        set LoadIsoEfiDriver=on
        unset vtisouefi
    elif vt_check_mode 2; then
        set LoadIsoEfiDriver=on
    else
        unset LoadIsoEfiDriver
    fi

    set chosen_path=$2
    vt_select_auto_install ${chosen_path}
    vt_select_persistence ${chosen_path}

    if vt_is_udf ${1}${chosen_path}; then
        set ventoy_fs_probe=udf
    else
        set ventoy_fs_probe=iso9660
        vt_iso9660_nojoliet 0
    fi

    loopback loop ${1}${chosen_path}    
    get_os_type (loop)
    
    if [ -d (loop)/EFI ]; then
        set vt_efi_dir=YES
    elif [ -d (loop)/efi ]; then
        set vt_efi_dir=YES
    else
        set vt_efi_dir=NO
    fi
    
    if [ -n "$vtcompat" ]; then
        set ventoy_compatible=YES
        unset vtcompat
    elif vt_check_mode 1; then
        set ventoy_compatible=YES
    else
        vt_check_compatible (loop)
    fi
    
    vt_img_sector ${1}${chosen_path}
    
    if [ "$vtoy_os" = "Windows" ]; then
        vt_check_compatible_pe (loop)        
        uefi_windows_menu_func  $1 ${chosen_path}
    elif [ "$vtoy_os" = "Unix" ]; then
        uefi_unix_menu_func $1 ${chosen_path}
    else
        uefi_linux_menu_func  $1 ${chosen_path}
    fi

    ventoy_gui_console
}

function uefi_iso_memdisk {    
    echo 'Loading ISO file to memory ...'
    vt_load_img_memdisk ${1}${2} vtoy_iso_buf
    
    ventoy_cli_console
    chainloader ${vtoy_path}/ventoy_x64.efi memdisk env_param=${env_param} isoefi=${LoadIsoEfiDriver} ${vtdebug_flag} mem:${vtoy_iso_buf_addr}:size:${vtoy_iso_buf_size}
    boot
    
    ventoy_gui_console
}


function legacy_windows_menu_func {
    vt_windows_reset
    
    if [ "$ventoy_compatible" = "NO" ]; then   
        
        if [ "$ventoy_fs_probe" = "iso9660" ]; then
            loopback -d loop
            vt_iso9660_nojoliet 1
            loopback loop $1$2
        fi
        
        for file in "boot/bcd" "/efi/microsoft/boot/bcd" "SSTR/BCD"; do
            vt_windows_collect_wim_patch bcd (loop)/$file                
        done
        
        distro_specify_wim_patch

        vt_windows_count_wim_patch vt_wim_cnt
        if [ $vt_wim_cnt -eq 0 ]; then
            distro_specify_wim_patch_phase2
        fi
        
        ventoy_debug_pause        
        locate_wim
    fi

    vt_windows_chain_data ${1}${chosen_path}    
    ventoy_debug_pause    
    
    if [ -n "$vtoy_chain_mem_addr" ]; then
        linux16   $vtoy_path/ipxe.krn ${vtdebug_flag} ibft mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        boot
    else
        echo "chain empty failed"
        ventoy_pause
    fi
}

function legacy_linux_menu_func {
    if [ "$ventoy_compatible" = "NO" ]; then

        if [ "$ventoy_fs_probe" = "udf" ]; then
            loopback -d loop
            set ventoy_fs_probe=iso9660
            loopback loop $1$2
        fi
    
        vt_load_cpio  $vtoy_path/ventoy.cpio  $2 $1 "busybox=$ventoy_busybox_ver"

        vt_linux_clear_initrd
        
        if [ -d (loop)/pmagic ]; then
            vt_linux_specify_initrd_file /pmagic/initrd.img
        else
            for dir in "isolinux" "boot/isolinux" "boot/x86_64/loader" "syslinux" "boot/syslinux"; do
                if [ -d (loop)/$dir ]; then
                    vt_linux_parse_initrd_isolinux   (loop)/$dir/
                fi
            done
        fi
        
        # special process for special distros
        #archlinux
        if [ -d (loop)/arch/boot/syslinux ]; then
            vt_linux_parse_initrd_isolinux   (loop)/arch/boot/syslinux/  /arch/
            vt_linux_parse_initrd_isolinux   (loop)/arch/boot/syslinux/  /arch/boot/syslinux/
            
        #manjaro
        elif [ -d (loop)/manjaro ]; then
            if [ -e (loop)/boot/grub/kernels.cfg ]; then
                vt_linux_parse_initrd_grub  file  (loop)/boot/grub/kernels.cfg
            fi
        elif [ -e (loop)/boot/grub/grub.cfg ]; then                
            vt_linux_parse_initrd_grub  file  (loop)/boot/grub/grub.cfg
        fi
        
        distro_specify_initrd_file
        
        vt_linux_initrd_count vtcount
        if [ $vtcount -eq 0 ]; then
            if [ -d (loop)/rancheros ]; then
                vt_linux_parse_initrd_isolinux   (loop)/boot/  /boot/isolinux/
            fi

            distro_specify_initrd_file_phase2
        fi
        
        locate_initrd
    fi
    
    vt_linux_chain_data ${1}${chosen_path}    
    ventoy_debug_pause
    
    if [ -n "$vtoy_chain_mem_addr" ]; then
        linux16   $vtoy_path/ipxe.krn ${vtdebug_flag}  mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        boot
    else
        echo "chain empty failed"
        ventoy_pause
    fi
}


function legacy_unix_menu_func {    
    ventoy_unix_comm_proc $1 ${chosen_path}
    
    if [ -n "$vtoy_chain_mem_addr" ]; then
        linux16   $vtoy_path/ipxe.krn ${vtdebug_flag}  mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        boot
    else
        echo "chain empty failed"
        ventoy_pause
    fi
}


function legacy_iso_menu_func {

    if [ -d (loop)/ ]; then
        loopback -d loop
    fi

    set chosen_path=$2
    vt_select_auto_install ${chosen_path}
    vt_select_persistence ${chosen_path}

    if vt_is_udf ${1}${chosen_path}; then
        set ventoy_fs_probe=udf
    else
        set ventoy_fs_probe=iso9660
        vt_iso9660_nojoliet 0
    fi
    
    loopback loop ${1}${chosen_path}
    
    get_os_type (loop)

    if [ -n "$vtcompat" ]; then
        set ventoy_compatible=YES
        unset vtcompat
    elif vt_check_mode 1; then
        set ventoy_compatible=YES
    else
        vt_check_compatible (loop)
    fi
    
    vt_img_sector ${1}${chosen_path}

    if [ "$vtoy_os" = "Windows" ]; then
        vt_check_compatible_pe (loop)        
        legacy_windows_menu_func  $1 ${chosen_path}
    elif [ "$vtoy_os" = "Unix" ]; then
        legacy_unix_menu_func $1 ${chosen_path}
    else
        legacy_linux_menu_func  $1 ${chosen_path}
    fi
}

function legacy_iso_memdisk {

    linux16   $vtoy_path/memdisk iso raw    
    echo "Loading ISO file to memory ..."
    initrd16  ${1}${2}
    boot
}


function iso_endless_os_proc {
    if [ -d (loop)/ ]; then
        loopback -d loop
    fi

    loopback loop ${1}${2}   
    vt_img_sector ${1}${2}

    vt_load_cpio  $vtoy_path/ventoy.cpio  $2 $1  "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio $1 $2 noinit
    
    ventoy_debug_pause

    vt_set_boot_opt '@kparams' rdinit=/vtoy/vtoy 

    set eosimage=loop
    set ventoy_bls_bootdev=/boot    
    set ventoy_loading_tip="Loading files ......"
    
    export eosimage    
    configfile (loop)/endless/grub/grub.cfg
    
    unset eosimage
    unset ventoy_bls_bootdev
    unset ventoy_loading_tip
    
    vt_unset_boot_opt
}


function ventoy_iso_busybox_ver {
    set ventoy_busybox_ver=32
    
    #special process for deepin-live iso
    if [ "$vt_chosen_size" = "403701760" ]; then
        if vt_str_begin $vt_chosen_path "/deepin-live"; then
            set ventoy_busybox_ver=64
        fi
    elif vt_str_begin $vt_volume_id "PHOTON_"; then
        set ventoy_busybox_ver=64
    elif vt_str_begin $vt_volume_id "smgl-test-quinq-x86_64"; then
        set ventoy_busybox_ver=64
        
    fi
}

function iso_common_menuentry {
    unset vt_system_id
    unset vt_volume_id
    
    vt_chosen_img_path vt_chosen_path vt_chosen_size
    vt_parse_iso_volume ${vtoy_iso_part}${vt_chosen_path} vt_system_id vt_volume_id
    
    ventoy_iso_busybox_ver
    
    #special process for Endless OS
    if vt_str_begin $vt_volume_id "Endless-OS"; then
        iso_endless_os_proc $vtoy_iso_part $vt_chosen_path
    elif vt_str_begin $vt_volume_id "TENS-Public"; then
        set vtcompat=1
    fi

    if [ "$grub_platform" = "pc" ]; then
        if vt_check_mode 0; then
            legacy_iso_memdisk $vtoy_iso_part $vt_chosen_path
        else
            legacy_iso_menu_func $vtoy_iso_part $vt_chosen_path
        fi
    else
        if vt_check_mode 0; then
            uefi_iso_memdisk $vtoy_iso_part  $vt_chosen_path
        else
            uefi_iso_menu_func $vtoy_iso_part  $vt_chosen_path             
        fi
    fi      
}

function common_unsupport_menuentry {
    echo -e "\n The name of the iso file could NOT contain space or non-ascii characters. \n"
    echo -e " 文件名中不能有中文或空格 \n"    
    echo -e "\npress ENTER to exit (请按 回车 键返回) ..."    
    read vtInputKey
}

function iso_unsupport_menuentry {
    common_unsupport_menuentry
}

function wim_common_menuentry {
    vt_chosen_img_path vt_chosen_path vt_chosen_size
    vt_wim_chain_data ${vtoy_iso_part}${vt_chosen_path}
    
    ventoy_debug_pause    
    
    if [ -n "$vtoy_chain_mem_addr" ]; then
        if [ "$grub_platform" = "pc" ]; then
            linux16   $vtoy_path/ipxe.krn ${vtdebug_flag}  mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        else
            ventoy_cli_console
            chainloader ${vtoy_path}/ventoy_x64.efi  env_param=${env_param} isoefi=${LoadIsoEfiDriver} ${vtdebug_flag} mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
            ventoy_gui_console
        fi
        boot
    else
        echo "chain empty failed"
        ventoy_pause
    fi
}

function wim_unsupport_menuentry {
    common_unsupport_menuentry
}

function efi_common_menuentry {
    vt_chosen_img_path vt_chosen_path vt_chosen_size
    
    vt_concat_efi_iso ${vtoy_iso_part}${vt_chosen_path} vtoy_iso_buf
    
    ventoy_debug_pause
    
    ventoy_cli_console

    unset vtoy_dotefi_retry
    chainloader ${vtoy_path}/ventoy_x64.efi memdisk env_param=${env_param} dotefi isoefi=on ${vtdebug_flag} mem:${vtoy_iso_buf_addr}:size:${vtoy_iso_buf_size}
    boot
    
    if [ -n "$vtoy_dotefi_retry" ]; then
        unset vtoy_dotefi_retry
        chainloader ${vtoy_iso_part}${vt_chosen_path}
        boot
    fi
    
    ventoy_gui_console
}

function efi_unsupport_menuentry {
    common_unsupport_menuentry
}

#
#============================================================#
# IMG file boot process                                      #
#============================================================#
#


function ventoy_img_easyos {
    vt_load_cpio  $vtoy_path/ventoy.cpio  ${vt_chosen_path} ${vtoy_iso_part} "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio ${vtoy_iso_part} ${vt_chosen_path} noinit
    
    loopback easysfs (vtimghd,1)/easy.sfs
    vt_get_lib_module_ver (easysfs) /lib/modules/ vt_module_ver
    
    if [ -n "$vt_module_ver" ]; then        
        for mod in "kernel/drivers/md/dm-mod.ko" "kernel/drivers/dax/dax.ko"; do
            vt_img_extra_initrd_append  (easysfs)/lib/modules/$vt_module_ver/$mod
        done
    fi

    ventoy_debug_pause

    #boot image file
    vt_set_boot_opt rdinit=/vtoy/vtoy
    vt_img_hook_root
    
    syslinux_configfile (vtimghd,1)/syslinux.cfg
    
    vt_img_unhook_root
    vt_unset_boot_opt
    loopback -d easysfs
}

function ventoy_img_volumio {
    vt_load_cpio  $vtoy_path/ventoy.cpio  ${vt_chosen_path} ${vtoy_iso_part} "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio ${vtoy_iso_part} ${vt_chosen_path} noinit

    ventoy_debug_pause

    #boot image file
    vt_set_boot_opt rdinit=/vtoy/vtoy imgpart=/dev/ventoy2 bootpart=/dev/ventoy1
    vt_img_hook_root
    
    syslinux_configfile (vtimghd,1)/syslinux.cfg
    
    vt_img_unhook_root
    vt_unset_boot_opt
}

function ventoy_img_openelec {
    elec_ver=$1
    
    vt_load_cpio  $vtoy_path/ventoy.cpio  ${vt_chosen_path} ${vtoy_iso_part} "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio ${vtoy_iso_part} ${vt_chosen_path} noinit

    loopback vtloopex $vtoy_efi_part/ventoy/vtloopex.cpio    
    vt_img_extra_initrd_append  (vtloopex)/$elec_ver/vtloopex.tar.xz

    ventoy_debug_pause

    #boot image file
    vt_set_boot_opt rdinit=/vtoy/vtoy ventoyos=$elec_ver
    vt_img_hook_root
    
    set root=(vtimghd,1)
    syslinux_configfile (vtimghd,1)/syslinux.cfg
    
    vt_img_unhook_root
    vt_unset_boot_opt
    loopback -d vtloopex
}


function ventoy_img_freedombox {
    vt_load_cpio  $vtoy_path/ventoy.cpio  ${vt_chosen_path} ${vtoy_iso_part} "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio ${vtoy_iso_part} ${vt_chosen_path} noinit

    vt_get_lib_module_ver (vtimghd,1) /lib/modules/ vt_module_ver
    if [ -n "$vt_module_ver" ]; then        
        vt_img_extra_initrd_append  (vtimghd,1)/lib/modules/$vt_module_ver/kernel/drivers/md/dm-mod.ko
    fi

    ventoy_debug_pause

    #boot image file
    vt_set_boot_opt rdinit=/vtoy/vtoy ventoyos=freedombox
    vt_img_hook_root
    
    configfile (vtimghd,1)/boot/grub/grub.cfg
    
    vt_img_unhook_root
    vt_unset_boot_opt
}

function ventoy_img_paldo {
    vt_load_cpio  $vtoy_path/ventoy.cpio  ${vt_chosen_path} ${vtoy_iso_part} "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio ${vtoy_iso_part} ${vt_chosen_path} noinit

    ventoy_debug_pause

    #boot image file
    vt_set_boot_opt rdinit=/vtoy/vtoy ventoyos=paldo
    vt_img_hook_root
    
    vt_fs_enum_1st_file (vtimghd,1) /loader/entries/ vt_paldo_entry_conf
    vt_file_basename $vt_paldo_entry_conf vtPaldoVer
    
    echo loading file...
    linux (vtimghd,1)/linux-${vtPaldoVer} root=/dev/ventoy1 rootfstype=vfat
    initrd (vtimghd,1)/initramfs-${vtPaldoVer}
    boot
    
    vt_img_unhook_root
    vt_unset_boot_opt
}

function ventoy_img_ubos {
    vt_load_cpio  $vtoy_path/ventoy.cpio  ${vt_chosen_path} ${vtoy_iso_part} "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio ${vtoy_iso_part} ${vt_chosen_path} noinit

    vt_get_lib_module_ver (vtimghd,3) /lib/modules/ vt_module_ver
    if [ -n "$vt_module_ver" ]; then        
        vt_img_extra_initrd_append  (vtimghd,3)/lib/modules/$vt_module_ver/kernel/drivers/md/dm-mod.ko.xz
    fi

    ventoy_debug_pause

    #boot image file
    vt_set_boot_opt rdinit=/vtoy/vtoy ventoyos=ubos
    vt_img_hook_root
    
    echo loading file...
    linux (vtimghd,2)/vmlinuz-linux root=/dev/ventoy3 rw
    initrd (vtimghd,2)/initramfs-linux.img
    boot

    vt_img_unhook_root
    vt_unset_boot_opt
}

function ventoy_img_recalbox {
    vt_load_cpio  $vtoy_path/ventoy.cpio  ${vt_chosen_path} ${vtoy_iso_part} "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio ${vtoy_iso_part} ${vt_chosen_path} noinit

    ventoy_debug_pause

    #boot image file
    vt_set_boot_opt rdinit=/vtoy/vtoy ventoyos=recalbox
    vt_img_hook_root
    
    set root=(vtimghd,1)
    configfile (vtimghd,1)/boot/grub/grub.cfg

    vt_img_unhook_root
    vt_unset_boot_opt
}

function ventoy_img_batocera {
    vt_load_cpio  $vtoy_path/ventoy.cpio  ${vt_chosen_path} ${vtoy_iso_part} "busybox=$ventoy_busybox_ver"
    vt_trailer_cpio ${vtoy_iso_part} ${vt_chosen_path} noinit

    ventoy_debug_pause

    #boot image file
    vt_set_boot_opt rdinit=/vtoy/vtoy ventoyos=batocera
    vt_img_hook_root
    
    set root=(vtimghd,1)
    syslinux_configfile (vtimghd,1)/boot/syslinux/syslinux.cfg

    vt_img_unhook_root
    vt_unset_boot_opt
}

function ventoy_img_memtest86 {      
    chainloader (vtimghd,1)/efi/boot/BOOTX64.efi
    boot
}

function img_unsupport_tip {
    echo -e "\n This IMG file is NOT supported now. \n"
    echo -e " 当前不支持启动此 IMG 文件 \n"    
    echo -e "\npress ENTER to exit (请按 回车 键返回) ..."    
    read vtInputKey 
}

function img_common_menuentry {
    set ventoy_compatible=YES
    set ventoy_busybox_ver=32

    vt_chosen_img_path vt_chosen_path vt_chosen_size

    if [ -d (vtimghd)/ ]; then
        loopback -d vtimghd
    fi

    loopback vtimghd ${vtoy_iso_part}${vt_chosen_path}
    vt_img_sector ${vtoy_iso_part}${vt_chosen_path}

    vt_img_part_info (vtimghd)

    set vtback_root=$root
    ventoy_cli_console
    vt_push_last_entry

    vt_img_extra_initrd_reset

    vt_get_fs_label (vtimghd,1) vtImgHd1Label
    if [ -d (vtimghd,2)/lib ]; then
        vt_get_fs_label (vtimghd,2) vtImgHd2Label
    fi
    
    if [ -e (vtimghd,1)/etc/hostname ]; then
        vt_1st_line (vtimghd,1)/etc/hostname vtImgHostname
    fi
    
    if [ -e (vtimghd,1)/easy.sfs ]; then
        ventoy_img_easyos
    elif [ -e (vtimghd,1)/volumio.initrd ]; then
        ventoy_img_volumio
    elif vt_str_begin $vtImgHd1Label "LAKKA"; then
        ventoy_img_openelec lakka
    elif vt_str_begin $vtImgHd1Label "LIBREELEC"; then
        ventoy_img_openelec LibreELEC
    elif vt_str_begin $vtImgHd1Label "paldo-live"; then
        ventoy_img_paldo
    elif vt_str_begin $vtImgHostname "freedombox"; then
        ventoy_img_freedombox
    elif vt_str_begin $vtImgHd1Label "BATOCERA"; then
        ventoy_img_batocera
    elif [ "$vtImgHd2Label" = "RECALBOX" ]; then
        ventoy_img_recalbox
    elif [ -f (vtimghd,2)/loader/entries/ubos.conf ]; then
        ventoy_img_ubos
    elif [ -f (vtimghd,1)/efi/boot/mt86.png ]; then 
        if [ "$grub_platform" = "pc" ]; then
            img_unsupport_tip
        else
            ventoy_img_memtest86            
        fi
    else
        if [ "$grub_platform" = "pc" ]; then 
            img_unsupport_tip
        else
            vt_linux_chain_data ${vtoy_iso_part}${vt_chosen_path}
            chainloader ${vtoy_path}/ventoy_x64.efi sector512 env_param=${env_param} isoefi=${LoadIsoEfiDriver} FirstTry=${FirstTryBootFile} ${vtdebug_flag} mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
            boot
        fi
    fi

    set root=$vtback_root
    vt_pop_last_entry
    ventoy_gui_console
    set ventoy_compatible=NO
}

function img_unsupport_menuentry {
    common_unsupport_menuentry
}

#############################################################
#############################################################
#############################################################
#######                 Main Process              ###########
#############################################################
#############################################################
#############################################################

set VENTOY_VERSION="1.0.20"

# Default menu display mode, you can change it as you want.
#    0: List mode   
#    1: TreeView mode
set VTOY_DEFAULT_MENU_MODE=0

set VTOY_MEM_DISK_STR="[Memdisk]"
set VTOY_ISO_RAW_STR="Compatible Mode"
set VTOY_ISO_UEFI_DRV_STR="UEFI FS"

set VTOY_F2_CMD="ventoy_power"
set VTOY_F4_CMD="ventoy_localboot"
set VTOY_F5_CMD="ventoy_diagnosis"
set VTOY_F6_CMD="ventoy_ext_menu"

if [ "$grub_platform" = "pc" ]; then
    set VTOY_TEXT_MENU_VER="Ventoy $VENTOY_VERSION BIOS  www.ventoy.net"
else
    set VTOY_TEXT_MENU_VER="Ventoy $VENTOY_VERSION UEFI  www.ventoy.net"
fi

vt_device $root  vtoy_dev

if [ "$vtoy_dev" = "tftp" ]; then
    set vtoy_path=($root)
    for vtid in 0 1 2 3; do
        if [ -d (hd$vtid,2)/ventoy ]; then
            set vtoy_iso_part=(hd$vtid,1)
            set vtoy_efi_part=(hd$vtid,2)
            break
        fi
    done
    loadfont ascii

    if [ -f $vtoy_iso_part/ventoy/ventoy.json ]; then
       set vt_plugin_path=$vtoy_iso_part
    else
        set vt_plugin_path=$prefix
        vt_load_plugin $vt_plugin_path
    fi
else
    if [ "$prefix" = "(ventoydisk)/grub" ]; then
        set vtoy_path=(ventoydisk)/ventoy
    else
        set vtoy_path=($root)/ventoy
    fi

    set vtoy_iso_part=($vtoy_dev,1)
    set vtoy_efi_part=($vtoy_dev,2)
    loadfont unicode
    set vt_plugin_path=$vtoy_iso_part
fi


#Load Plugin
if [ -f $vtoy_iso_part/ventoy/ventoy.json ]; then
   vt_load_plugin $vtoy_iso_part
fi

if [ -n "$VTOY_MENU_TIMEOUT" ]; then
    set timeout=$VTOY_MENU_TIMEOUT
else
    unset timeout
fi

if [ -f $vtoy_iso_part/ventoy/ventoy_wimboot.img ]; then
    vt_load_wimboot $vtoy_iso_part/ventoy/ventoy_wimboot.img
elif [ -f $vtoy_efi_part/ventoy/ventoy_wimboot.img ]; then
    vt_load_wimboot $vtoy_efi_part/ventoy/ventoy_wimboot.img
fi


if [ $VTOY_DEFAULT_MENU_MODE -eq 0 ]; then
    set VTOY_F3_CMD="vt_dynamic_menu 1 1"
    set VTOY_HOTKEY_TIP="F1:Memdisk  F2:Power  F3:TreeView  F4:Localboot  F5:Debug  F6:ExMenu"
else
    set VTOY_F3_CMD="vt_dynamic_menu 1 0"
    set VTOY_HOTKEY_TIP="F1:Memdisk  F2:Power  F3:ListView  F4:Localboot  F5:Debug  F6:ExMenu"
fi


if [ -n "$vtoy_gfxmode" ]; then
    set gfxmode=$vtoy_gfxmode
else
    set gfxmode=1920x1080,1366x768,1024x768
fi

if [ "$vtoy_display_mode" = "CLI" ]; then
    terminal_output  console
elif [ "$vtoy_display_mode" = "serial" ]; then
    if [ -n "$vtoy_serial_param" ]; then
        serial $vtoy_serial_param
    fi
    terminal_input   serial
    terminal_output  serial
elif [ "$vtoy_display_mode" = "serial_console" ]; then
    if [ -n "$vtoy_serial_param" ]; then
        serial $vtoy_serial_param
    fi
    terminal_input   serial console
    terminal_output  serial console    
else    
    if [ -n "$vtoy_theme" ]; then
        set theme=$vtoy_theme
    else
        set theme=$prefix/themes/ventoy/theme.txt
    fi
    terminal_output  gfxterm
fi

#export necessary variable
export theme
export gfxmode
export vtoy_dev
export vtoy_iso_part
export vtoy_efi_part
export VENTOY_VERSION




#colect all image files (iso files)
set ventoy_img_count=0
vt_list_img $vtoy_iso_part ventoy_img_count

#Main menu
if [ $ventoy_img_count -gt 0 ]; then
    if [ $VTOY_DEFAULT_MENU_MODE -eq 0 ]; then
        vt_dynamic_menu 0 0 
    else
        vt_dynamic_menu 0 1
    fi
else
    if [ -n "$VTOY_NO_ISO_TIP" ]; then
        NO_ISO_MENU="No ISO files found, $VTOY_NO_ISO_TIP"
    elif [ -n "$VTOY_DEFAULT_SEARCH_ROOT" ]; then
        NO_ISO_MENU="No ISO files found, please check VTOY_DEFAULT_SEARCH_ROOT"
    else
        NO_ISO_MENU="No ISO files found"
    fi
    menuentry "$NO_ISO_MENU (Press enter to reboot ...)" {
        echo -e "\n    Rebooting ... "
        reboot
    }
fi
