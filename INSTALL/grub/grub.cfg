#************************************************************************************
# Copyright (c) 2020, longpanda <admin@ventoy.net>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
# 
#************************************************************************************

function get_os_type {
    set vtoy_os=Linux    
    for file in "efi/microsoft" "sources/boot.wim" "boot/bcd" "bootmgr.efi" "boot/etfsboot.com"; do
        if [ -e $1/$file ]; then
            set vtoy_os=Windows
            break
        fi
    done
    
    if [ -n "${vtdebug_flag}" ]; then
        echo ISO is $vtoy_os
    fi
}

function locate_initrd {    
    vt_linux_locate_initrd 

    if [ -n "${vtdebug_flag}" ]; then
        vt_linux_dump_initrd
        sleep 5
    fi
}

function find_wim_file {
    unset ventoy_wim_file
    
    for file in "sources/boot.wim" "sources/BOOT.WIM" "Sources/Win10PEx64.WIM" "boot/BOOT.WIM" "winpe_x64.wim"; do
        if [ -e $1/$file ]; then
            set ventoy_wim_file=$1/$file
            break
        fi
    done
}

function distro_specify_initrd_file {
    if [ -e (loop)/boot/all.rdz ]; then
        vt_linux_specify_initrd_file /boot/all.rdz
    elif [ -e (loop)/boot/xen.gz ]; then 
        if [ -e (loop)/install.img ]; then
            vt_linux_specify_initrd_file /install.img
        fi
    elif [ -d (loop)/casper ]; then 
        if [ -e (loop)/casper/initrd ]; then
            vt_linux_specify_initrd_file /casper/initrd
        fi
        if [ -e (loop)/casper/initrd-oem ]; then
            vt_linux_specify_initrd_file /casper/initrd-oem
        fi
    fi
}

function uefi_windows_menu_func {
    vt_windows_reset
    
    if [ "$ventoy_compatible" = "NO" ]; then        
        find_wim_file (loop)
        if [ -n "$ventoy_wim_file" ]; then
            vt_windows_locate_wim $ventoy_wim_file
        fi
    fi
    
    vt_windows_chain_data ${1}${chosen_path}

    if [ -n "$vtoy_chain_mem_addr" ]; then
        terminal_output  console       
        chainloader ${vtoy_path}/ventoy_x64.efi  env_param=${env_param} isoefi=${LoadIsoEfiDriver} ${vtdebug_flag} mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        boot
    else
        echo "chain empty failed"
        sleep 5
    fi
}

function uefi_linux_menu_func {
    if [ "$ventoy_compatible" = "NO" ]; then    
        vt_load_cpio  ${vtoy_path}/ventoy.cpio

        vt_linux_clear_initrd
        
        for file in "boot/grub/grub.cfg" "EFI/BOOT/grub.cfg" "EFI/boot/grub.cfg" "efi/boot/grub.cfg" "EFI/BOOT/BOOTX64.conf"; do
            if [ -e (loop)/$file ]; then
                vt_linux_parse_initrd_grub  file  (loop)/$file
            fi
        done
        
        vt_linux_initrd_count initrd_count
        
        # special process for special distros
        if vt_cmp $initrd_count eq 0; then   
            if [ -d (loop)/loader/entries ]; then
                set LoadIsoEfiDriver=on
                vt_linux_parse_initrd_grub  dir  (loop)/loader/entries/
            elif [ -d (loop)/boot/grub ]; then
                vt_linux_parse_initrd_grub  dir  (loop)/boot/grub/
            fi
        fi
        
        vt_linux_initrd_count initrd_count
        if vt_cmp $initrd_count eq 0; then   
            distro_specify_initrd_file
        fi
        
        locate_initrd
    fi
    
    vt_linux_chain_data ${1}${chosen_path}

    if [ -n "$vtoy_chain_mem_addr" ]; then
        terminal_output  console       
        chainloader ${vtoy_path}/ventoy_x64.efi  env_param=${env_param} isoefi=${LoadIsoEfiDriver} ${vtdebug_flag} mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}
        boot
    else
        echo "chain empty failed"
        sleep 5
    fi
}


function uefi_iso_menu_func {

    if [ -d (loop)/ ]; then
        loopback -d loop
    fi

    unset LoadIsoEfiDriver
   
    vt_chosen_img_path chosen_path

    if vt_is_udf ${1}${chosen_path}; then
        set ventoy_fs_probe=udf
    else
        set ventoy_fs_probe=iso9660
    fi

    loopback loop ${1}${chosen_path}
    get_os_type (loop)
    
    vt_check_compatible (loop)
    
    vt_img_sector ${1}${chosen_path}
    
    if [ "$vtoy_os" = "Windows" ]; then
        uefi_windows_menu_func  $1
    else
        uefi_linux_menu_func  $1
    fi

    terminal_output  gfxterm    
}

function legacy_windows_menu_func {
    vt_windows_reset
    
    if [ "$ventoy_compatible" = "NO" ]; then                
        find_wim_file (loop)
        if [ -n "$ventoy_wim_file" ]; then
            vt_windows_locate_wim $ventoy_wim_file
        elif [ -n "${vtdebug_flag}" ]; then
            echo No wim file found
        fi
    fi
       
    vt_windows_chain_data ${1}${chosen_path}
    
    if [ -n "${vtdebug_flag}" ]; then
        sleep 5
    fi
    
    if [ -n "$vtoy_chain_mem_addr" ]; then
        linux16   $vtoy_path/ipxe.krn ${vtdebug_flag} ibft
        initrd16  mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}        
        boot
    else
        echo "chain empty failed"
        sleep 5
    fi
}

function legacy_linux_menu_func {
    if [ "$ventoy_compatible" = "NO" ]; then
    
        vt_load_cpio  $vtoy_path/ventoy.cpio

        vt_linux_clear_initrd
                
        for dir in "isolinux" "boot/isolinux" "boot/x86_64/loader" "syslinux" "boot/syslinux"; do
            if [ -d (loop)/$dir ]; then
                vt_linux_parse_initrd_isolinux   (loop)/$dir/
            fi
        done
        
        vt_linux_initrd_count initrd_count
        
        # special process for special distros
        if vt_cmp $initrd_count eq 0; then   
            #archlinux
            if [ -d (loop)/arch/boot/syslinux ]; then
                vt_linux_parse_initrd_isolinux   (loop)/arch/boot/syslinux/  /arch/
                vt_linux_parse_initrd_isolinux   (loop)/arch/boot/syslinux/  /arch/boot/syslinux/
                
            #manjaro
            elif [ -d (loop)/manjaro ]; then
                if [ -e (loop)/boot/grub/kernels.cfg ]; then
                    vt_linux_parse_initrd_grub  file  (loop)/boot/grub/kernels.cfg
                fi
            elif [ -e (loop)/boot/grub/grub.cfg ]; then                
                vt_linux_parse_initrd_grub  file  (loop)/boot/grub/grub.cfg
            fi
        fi
        
        vt_linux_initrd_count initrd_count
        if vt_cmp $initrd_count eq 0; then   
            distro_specify_initrd_file
        fi
        
        locate_initrd
    fi
    
    vt_linux_chain_data ${1}${chosen_path}
    
    if [ -n "${vtdebug_flag}" ]; then
        sleep 5
    fi
    
    if [ -n "$vtoy_chain_mem_addr" ]; then        
        linux16   $vtoy_path/ipxe.krn ${vtdebug_flag}
        initrd16  mem:${vtoy_chain_mem_addr}:size:${vtoy_chain_mem_size}        
        boot
    else
        echo "chain empty failed"
        sleep 5
    fi
}

function legacy_iso_menu_func {

    if [ -d (loop)/ ]; then
        loopback -d loop
    fi

    vt_chosen_img_path chosen_path

    if vt_is_udf ${1}${chosen_path}; then
        set ventoy_fs_probe=udf
    else
        set ventoy_fs_probe=iso9660
    fi   

    loopback loop ${1}${chosen_path}
    
    get_os_type (loop)
    
    vt_check_compatible (loop)
    
    vt_img_sector ${1}${chosen_path}
   
    if [ "$vtoy_os" = "Windows" ]; then
        legacy_windows_menu_func  $1
    else
        legacy_linux_menu_func  $1
    fi
}





#############################################################
#############################################################
#############################################################
#######                 Main Process              ###########
#############################################################
#############################################################
#############################################################

set VENTOY_VERSION="1.0.00"

#disable timeout
unset timeout

vt_device $root  vtoy_dev

if [ "$vtoy_dev" = "tftp" ]; then
    set vtoy_path=($root)    
    for vtid in 0 1 2 3; do
        if [ -d (hd$vtid,2)/grub ]; then
            set iso_path=(hd$vtid,1)
            break
        fi
    done
else
    set vtoy_path=($root)/ventoy    
    set iso_path=($vtoy_dev,1)
fi

loadfont ascii

if [ -f $iso_path/ventoy/ventoy.json ]; then
   vt_load_plugin $iso_path
fi

terminal_output  gfxterm

if [ -n "$vtoy_theme" ]; then
    set theme=$vtoy_theme
else
    set theme=$prefix/themes/ventoy/theme.txt
fi

if [ -n "$vtoy_gfxmode" ]; then
    set gfxmode=$vtoy_gfxmode
else
    set gfxmode=1024x768
fi

#colect all image files (iso files)
set ventoy_img_count=0
vt_list_img $iso_path ventoy_img_count

#Dynamic menu for every iso file
if vt_cmp $ventoy_img_count ne 0; then
    set imgid=0
    while vt_cmp $imgid lt $ventoy_img_count; do       
        vt_img_name $imgid img_name
        menuentry "$img_name" {  
            if [ "$grub_platform" = "pc" ]; then
                legacy_iso_menu_func $iso_path
            else
                uefi_iso_menu_func $iso_path                
            fi            
        }
        
        vt_incr imgid 1
    done
else
    menuentry "No ISO files found (Press enter to reboot ...)" {
        echo -e "\n    Rebooting ... "
        reboot
    }
fi

